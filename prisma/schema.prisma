generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blockList {
  id                             Int   @id @unique @default(autoincrement())
  blocker                        Int
  blocked                        Int
  users_blockList_blockedTousers users @relation("blockList_blockedTousers", fields: [blocked], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_blockList_blockerTousers users @relation("blockList_blockerTousers", fields: [blocker], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comments {
  id        Int       @id @unique @default(autoincrement())
  postID    Int
  userID    Int
  image     String?   @db.VarChar
  message   String?   @db.VarChar
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  posts     posts     @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users     @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model dislikes {
  id     Int   @id @unique @default(autoincrement())
  postID Int
  userID Int
  posts  posts @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users  users @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model friendList {
  id                                 Int   @id(map: "friendlist_pkey") @unique(map: "friendlist_id_key") @default(autoincrement())
  firstUser                          Int
  secondUser                         Int
  users_friendList_firstUserTousers  users @relation("friendList_firstUserTousers", fields: [firstUser], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_friendList_secondUserTousers users @relation("friendList_secondUserTousers", fields: [secondUser], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model friendRequests {
  id                                    Int   @id @unique @default(autoincrement())
  sender                                Int
  recipient                             Int
  users_friendRequests_recipientTousers users @relation("friendRequests_recipientTousers", fields: [recipient], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_friendRequests_senderTousers    users @relation("friendRequests_senderTousers", fields: [sender], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model likes {
  id     Int   @id @unique @default(autoincrement())
  postID Int
  userID Int
  posts  posts @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users  users @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model messages {
  id                                Int      @id @unique @default(autoincrement())
  senderID                          Int
  recipientID                       Int
  message                           String?  @db.VarChar
  image                             String?  @db.VarChar
  createdAt                         DateTime @default(now()) @db.Timestamptz(6)
  read                              Boolean  @default(false)
  users_messages_recipientIDTousers users    @relation("messages_recipientIDTousers", fields: [recipientID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_messages_senderIDTousers    users    @relation("messages_senderIDTousers", fields: [senderID], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model posts {
  id                          Int        @id @unique @default(autoincrement())
  userID                      Int
  message                     String     @db.VarChar
  image                       String?    @db.VarChar
  createdAt                   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime   @default(now()) @db.Timestamptz(6)
  shared                      Boolean?   @default(false)
  sharedBy                    Int?
  comments                    comments[]
  dislikes                    dislikes[]
  likes                       likes[]
  users_posts_sharedByTousers users?     @relation("posts_sharedByTousers", fields: [sharedBy], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                       users      @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                             Int              @id @unique @default(autoincrement())
  firstName                                      String           @db.VarChar
  lastName                                       String           @db.VarChar
  username                                       String           @unique @db.VarChar
  password                                       String           @db.VarChar
  gender                                         users_gender?    @default(M)
  race                                           String           @db.VarChar
  birthDate                                      DateTime         @db.Date
  occupation                                     String           @db.VarChar
  profilePicture                                 String?          @db.VarChar
  origin                                         String           @db.VarChar
  admin                                          Boolean?         @default(false)
  blockList_blockList_blockedTousers             blockList[]      @relation("blockList_blockedTousers")
  blockList_blockList_blockerTousers             blockList[]      @relation("blockList_blockerTousers")
  comments                                       comments[]
  dislikes                                       dislikes[]
  friendList_friendList_firstUserTousers         friendList[]     @relation("friendList_firstUserTousers")
  friendList_friendList_secondUserTousers        friendList[]     @relation("friendList_secondUserTousers")
  friendRequests_friendRequests_recipientTousers friendRequests[] @relation("friendRequests_recipientTousers")
  friendRequests_friendRequests_senderTousers    friendRequests[] @relation("friendRequests_senderTousers")
  likes                                          likes[]
  messages_messages_recipientIDTousers           messages[]       @relation("messages_recipientIDTousers")
  messages_messages_senderIDTousers              messages[]       @relation("messages_senderIDTousers")
  posts_posts_sharedByTousers                    posts[]          @relation("posts_sharedByTousers")
  posts                                          posts[]
}

enum users_gender {
  M
  F
}
